<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zookeeper</name>
    </assembly>
    <members>
        <member name="T:Sodao.Zookeeper.Config.ZKClientCollection">
            <summary>
            zkclient collection
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Config.ZKClientCollection.CreateNewElement">
            <summary>
            创建新元素。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Config.ZKClientCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            获取指定元素的Key。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Sodao.Zookeeper.Config.ZKClientCollection.Item(System.Int32)">
            <summary>
            获取指定位置的对象。
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:Sodao.Zookeeper.Config.ZKClientConfig">
            <summary>
            zk client config
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Config.ZKClientConfig.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Config.ZKClientConfig.Chroot">
            <summary>
            根目录
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Config.ZKClientConfig.SessionTimeout">
            <summary>
            session超时时间，单位：毫秒数
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Config.ZKClientConfig.ConnectionString">
            <summary>
            zk集群连接字符串，如127.0.0.1:2181,127.0.0.1:2182(多个server之间用,隔开)
            </summary>
        </member>
        <member name="T:Sodao.Zookeeper.Config.ZookeeperConfig">
            <summary>
            zookeeper config
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Config.ZookeeperConfig.Clients">
            <summary>
            zk clients
            </summary>
        </member>
        <member name="T:Sodao.Zookeeper.Data.ACL">
            <summary>
            acl
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.ACL.#ctor">
            <summary>
            new
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.ACL.#ctor(Sodao.Zookeeper.Data.Perms,Sodao.Zookeeper.Data.ZookID)">
            <summary>
            new
            </summary>
            <param name="perms"></param>
            <param name="id"></param>
        </member>
        <member name="P:Sodao.Zookeeper.Data.ACL.Perms">
            <summary>
            权限
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.ACL.ID">
            <summary>
            id
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.ACL.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            序列化
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.ACL.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            反序列化
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.AuthRequest">
            <summary>
            auth request
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.AuthRequest.Type">
            <summary>
            type
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.AuthRequest.Scheme">
            <summary>
            scheme
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.AuthRequest.Auth">
            <summary>
            auth data
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.AuthRequest.#ctor(System.Int32,System.String,System.Byte[])">
            <summary>
            new
            </summary>
            <param name="type"></param>
            <param name="scheme"></param>
            <param name="auth"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.AuthRequest.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            write
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.AuthRequest.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            read
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.ConnectRequest">
            <summary>
            connect request
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.ConnectRequest.#ctor(System.Int32,System.Int64,System.Int32,System.Int64,System.Byte[])">
            <summary>
            new
            </summary>
            <param name="protocolVersion"></param>
            <param name="lastZxidSeen"></param>
            <param name="timeOut"></param>
            <param name="sessionID"></param>
            <param name="passwd"></param>
        </member>
        <member name="P:Sodao.Zookeeper.Data.ConnectRequest.ProtocolVersion">
            <summary>
            协议version
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.ConnectRequest.LastZxidSeen">
            <summary>
            last zxid seen
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.ConnectRequest.SessionTimeOut">
            <summary>
            timeout
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.ConnectRequest.SessionID">
            <summary>
            sessionid
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.ConnectRequest.SessionPassword">
            <summary>
            password
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.ConnectRequest.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            序列化
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.ConnectRequest.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            反序列化
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.ConnectResponse">
            <summary>
            connect response
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.ConnectResponse.ProtocolVersion">
            <summary>
            协议version
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.ConnectResponse.SessionTimeOut">
            <summary>
            timeout
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.ConnectResponse.SessionID">
            <summary>
            sessionid
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.ConnectResponse.SessionPassword">
            <summary>
            password
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.ConnectResponse.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            序列化
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.ConnectResponse.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            反序列化
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.CreateMode">
            <summary>
            create mode
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.CreateMode.Flag">
            <summary>
            flag
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.CreateMode.Ephemeral">
            <summary>
            true表示临时的，false反之
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.CreateMode.Sequential">
            <summary>
            true表示顺序
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.CreateMode.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            new
            </summary>
            <param name="flag"></param>
            <param name="ephemeral"></param>
            <param name="sequential"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.CreateModes">
            <summary>
            create modes
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.CreateModes.Persistent">
            <summary>
            持久化
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.CreateModes.PersistentSequential">
            <summary>
            持久化+顺序
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.CreateModes.Ephemeral">
            <summary>
            临时
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.CreateModes.EphemeralSequential">
            <summary>
            临时+顺序
            </summary>
        </member>
        <member name="T:Sodao.Zookeeper.Data.CreateRequest">
            <summary>
            create request
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.CreateRequest.Path">
            <summary>
            path
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.CreateRequest.Data">
            <summary>
            path data
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.CreateRequest.Acl">
            <summary>
            acl array
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.CreateRequest.Flags">
            <summary>
            flags
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.CreateRequest.#ctor(System.String,System.Byte[],Sodao.Zookeeper.Data.ACL[],System.Int32)">
            <summary>
            new
            </summary>
            <param name="path"></param>
            <param name="data"></param>
            <param name="acl"></param>
            <param name="flags"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.CreateRequest.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            序列化
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Data.CreateRequest.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            反序列化
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.CreateResponse">
            <summary>
            create response
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.CreateResponse.Path">
            <summary>
            path
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.CreateResponse.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            write
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.CreateResponse.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            read
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.DeleteRequest">
            <summary>
            delete node request
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.DeleteRequest.Path">
            <summary>
            path
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.DeleteRequest.Version">
            <summary>
            version
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.DeleteRequest.#ctor(System.String,System.Int32)">
            <summary>
            new
            </summary>
            <param name="path"></param>
            <param name="version"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.DeleteRequest.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            write
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.DeleteRequest.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            read
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.EventType">
            <summary>
            event type枚举
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.EventType.None">
            <summary>
            none
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.EventType.NodeCreated">
            <summary>
            节点已创建
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.EventType.NodeDeleted">
            <summary>
            节点已被删除
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.EventType.NodeDataChanged">
            <summary>
            节点数据已更改
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.EventType.NodeChildrenChanged">
            <summary>
            子节点已更改
            </summary>
        </member>
        <member name="T:Sodao.Zookeeper.Data.ExistsRequest">
            <summary>
            exists request
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ExistsRequest.Path">
            <summary>
            path
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ExistsRequest.Watch">
            <summary>
            true表示侦听
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.ExistsRequest.#ctor(System.String,System.Boolean)">
            <summary>
            new
            </summary>
            <param name="path"></param>
            <param name="watch"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.ExistsRequest.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            write
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.ExistsRequest.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            read
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.GetACLRequest">
            <summary>
            get ACL request.
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.GetACLRequest.Path">
            <summary>
            the path of the node.
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetACLRequest.#ctor(System.String)">
            <summary>
            new
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetACLRequest.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            write
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetACLRequest.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            read
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.GetACLResponse">
            <summary>
            get ACL response
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.GetACLResponse.Acl">
            <summary>
            acl array
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.GetACLResponse.Stat">
            <summary>
            node stat
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetACLResponse.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            write
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetACLResponse.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            read
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.GetChildren2Response">
            <summary>
            get children v2 response
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.GetChildren2Response.Children">
            <summary>
            Children
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.GetChildren2Response.Stat">
            <summary>
            Stat
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetChildren2Response.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            write
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetChildren2Response.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            read
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.GetChildrenRequest">
            <summary>
            get children request
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.GetChildrenRequest.Path">
            <summary>
            path
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.GetChildrenRequest.Watch">
            <summary>
            true表示侦听
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetChildrenRequest.#ctor(System.String,System.Boolean)">
            <summary>
            new
            </summary>
            <param name="path"></param>
            <param name="watch"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetChildrenRequest.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            write
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetChildrenRequest.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            read
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.GetChildrenResponse">
            <summary>
            get children response
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.GetChildrenResponse.Children">
            <summary>
            Children
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetChildrenResponse.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            write
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetChildrenResponse.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            read
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.GetDataRequest">
            <summary>
            get data request
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.GetDataRequest.Path">
            <summary>
            path
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.GetDataRequest.Watch">
            <summary>
            true表示侦听
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetDataRequest.#ctor(System.String,System.Boolean)">
            <summary>
            new
            </summary>
            <param name="path"></param>
            <param name="watch"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetDataRequest.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            write
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetDataRequest.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            read
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.GetDataResponse">
            <summary>
            get data response
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.GetDataResponse.Data">
            <summary>
            get node data
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.GetDataResponse.Stat">
            <summary>
            get node stat
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetDataResponse.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            write
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.GetDataResponse.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            read
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.IDs">
            <summary>
            ids
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.IDs.ANYONE_ID_UNSAFE">
            <summary>
            This Id represents anyone.
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.IDs.AUTH_IDS">
            <summary>
            This Id is only usable to set ACLs. It will get substituted with the
            Id's the client authenticated with.
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.IDs.OPEN_ACL_UNSAFE">
            <summary>
            This is a completely open ACL .
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.IDs.CREATOR_ALL_ACL">
            <summary>
            This ACL gives the creators authentication id's all permissions.
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.IDs.READ_ACL_UNSAFE">
            <summary>
            This ACL gives the world the ability to read.
            </summary>
        </member>
        <member name="T:Sodao.Zookeeper.Data.IRecord">
            <summary>
            a record interface
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.IRecord.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            序列化
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.IRecord.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            反序列化
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.KeeperState">
            <summary>
            zookeeper state枚举
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.KeeperState.Unknown">
            <summary>
            unknow
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.KeeperState.Disconnected">
            <summary>
            已断开
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.KeeperState.NoSyncConnected">
            <summary>
            no同步连接
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.KeeperState.SyncConnected">
            <summary>
            同步连接
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.KeeperState.Expired">
            <summary>
            过期
            </summary>
        </member>
        <member name="T:Sodao.Zookeeper.Data.OpCode">
            <summary>
            operation code
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.Notification">
            <summary>
            通知
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.Create">
            <summary>
            新建
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.Exists">
            <summary>
            检测是否存在
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.GetData">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.SetData">
            <summary>
            设置数据
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.GetACL">
            <summary>
            获取acl
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.SetACL">
            <summary>
            设置acl
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.GetChildren">
            <summary>
            获取children
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.Sync">
            <summary>
            同步
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.Ping">
            <summary>
            ping, 心跳
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.GetChildren2">
            <summary>
            获取children v2
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.Auth">
            <summary>
            认证
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.SetWatches">
            <summary>
            设置侦听
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.CreateSession">
            <summary>
            新建session
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.CloseSession">
            <summary>
            关闭session
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.OpCode.Error">
            <summary>
            error
            </summary>
        </member>
        <member name="T:Sodao.Zookeeper.Data.Perms">
            <summary>
            权限枚举
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.Perms.READ">
            <summary>
            读
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.Perms.WRITE">
            <summary>
            写
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.Perms.CREATE">
            <summary>
            创建
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.Perms.DELETE">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.Perms.ADMIN">
            <summary>
            管理员
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.Perms.ALL">
            <summary>
            all
            </summary>
        </member>
        <member name="T:Sodao.Zookeeper.Data.SetACLRequest">
            <summary>
            set ACL request
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.SetACLRequest.Path">
            <summary>
            the path of the node
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.SetACLRequest.Acl">
            <summary>
            acl to set
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.SetACLRequest.Version">
            <summary>
            version
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.SetACLRequest.#ctor(System.String,Sodao.Zookeeper.Data.ACL[],System.Int32)">
            <summary>
            new
            </summary>
            <param name="path"></param>
            <param name="acl"></param>
            <param name="version"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.SetACLRequest.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            write
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.SetACLRequest.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            read
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.SetDataRequest">
            <summary>
            set data request
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.SetDataRequest.Path">
            <summary>
            the path of the node
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.SetDataRequest.Data">
            <summary>
            data to set
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.SetDataRequest.Version">
            <summary>
            version
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.SetDataRequest.#ctor(System.String,System.Byte[],System.Int32)">
            <summary>
            new
            </summary>
            <param name="path"></param>
            <param name="data"></param>
            <param name="version"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.SetDataRequest.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            write
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.SetDataRequest.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            read
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.SetWatchesRequest">
            <summary>
            set watches request
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.SetWatchesRequest.RelativeZxid">
            <summary>
            zxid
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.SetWatchesRequest.DataWatches">
            <summary>
            data watches
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.SetWatchesRequest.ExistWatches">
            <summary>
            exist watches
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.SetWatchesRequest.ChildWatches">
            <summary>
            child watches
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.SetWatchesRequest.#ctor(System.Int64,System.String[],System.String[],System.String[])">
            <summary>
            new
            </summary>
            <param name="relativeZxid"></param>
            <param name="dataWatches"></param>
            <param name="existWatches"></param>
            <param name="childWatches"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.SetWatchesRequest.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            write
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.SetWatchesRequest.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            read
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.Stat">
            <summary>
            stat
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.Stat.Czxid">
            <summary>
            导致此ZNode创建的zxid（ZooKeeper事务ID）
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.Stat.Mzxid">
            <summary>
            最后一次修改此ZNode的zxid
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.Stat.Ctime">
            <summary>
            从此ZNode创建到现在为止的时间毫秒数
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.Stat.Mtime">
            <summary>
            从此ZNode上次修改到现在为止的时间毫秒数
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.Stat.Version">
            <summary>
            此Znode的数据修改次数
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.Stat.Cversion">
            <summary>
            此ZNode的子节点修改次数
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.Stat.Aversion">
            <summary>
            此ZNode的ACL修改次数
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.Stat.EphemeralOwner">
            <summary>
            如果此ZNode是一个瞬时节点，此值表示此ZNode对应的会话ID。如果不是瞬时节点则为0
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.Stat.DataLength">
            <summary>
            此ZNode中数据的长度
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.Stat.NumChildren">
            <summary>
            此ZNode的子节点数量
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.Stat.Pzxid">
            <summary>
            pzxid
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.Stat.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            write
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.Stat.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            read
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.WatchedEvent">
            <summary>
            watched event
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.WatchedEvent.Type">
            <summary>
            type
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.WatchedEvent.State">
            <summary>
            state
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.WatchedEvent.Path">
            <summary>
            path
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.WatchedEvent.#ctor(Sodao.Zookeeper.Data.EventType,Sodao.Zookeeper.Data.KeeperState,System.String)">
            <summary>
            new
            </summary>
            <param name="type"></param>
            <param name="state"></param>
            <param name="path"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.WatcherEvent">
            <summary>
            watcher event
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.WatcherEvent.#ctor">
            <summary>
            new
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.WatcherEvent.Type">
            <summary>
            type
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.WatcherEvent.State">
            <summary>
            state
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.WatcherEvent.Path">
            <summary>
            path
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.WatcherEvent.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            序列化
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.WatcherEvent.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            反序列化
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Data.ZoookError">
            <summary>
            Codes which represent the various KeeperException
            types. This enum replaces the deprecated earlier static final int
            constants. The old, deprecated, values are in "camel case" while the new
            enum values are in all CAPS.
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.OK">
            <summary>
            Everything is OK
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.SYSTEMERROR">
            <summary>
            System and server-side errors.
            This is never thrown by the server, it shouldn't be used other than
            to indicate a range. Specifically error codes greater than this
            value, but lesser than {@link #APIERROR}, are system errors.
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.RUNTIMEINCONSISTENCY">
            <summary>
            A runtime inconsistency was found 
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.DATAINCONSISTENCY">
            <summary>
            A data inconsistency was found 
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.CONNECTIONLOSS">
            <summary>
            Connection to the server has been lost
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.MARSHALLINGERROR">
            <summary>
            Error while marshalling or unmarshalling data
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.UNIMPLEMENTED">
            <summary>
            Operation is unimplemented
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.OPERATIONTIMEOUT">
            <summary>
            Operation timeout
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.BADARGUMENTS">
            <summary>
            Invalid arguments
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.APIERROR">
            <summary>
            API errors.
            This is never thrown by the server, it shouldn't be used other than
            to indicate a range. Specifically error codes greater than this
            value are API errors (while values less than this indicate a
            {@link #SYSTEMERROR}).
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.NONODE">
            <summary>
            Node does not exist 
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.NOAUTH">
            <summary>
            Not authenticated
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.BADVERSION">
            <summary>
            Version conflict
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.NOCHILDRENFOREPHEMERALS">
            <summary>
            Ephemeral nodes may not have children
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.NODEEXISTS">
            <summary>
            The node already exists
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.NOTEMPTY">
            <summary>
            The node has children
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.SESSIONEXPIRED">
            <summary>
            The session has been expired by the server
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.INVALIDCALLBACK">
            <summary>
            Invalid callback specified
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.INVALIDACL">
            <summary>
            Invalid ACL specified
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.AUTHFAILED">
            <summary>
            Client authentication failed
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.Data.ZoookError.SESSIONMOVED">
            <summary>
            Session moved to another server, so operation is ignored
            </summary>
        </member>
        <member name="T:Sodao.Zookeeper.Data.ZookID">
            <summary>
            zookeeper id
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.ZookID.#ctor">
            <summary>
            new
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.ZookID.#ctor(System.String,System.String)">
            <summary>
            new
            </summary>
            <param name="scheme"></param>
            <param name="id"></param>
        </member>
        <member name="P:Sodao.Zookeeper.Data.ZookID.Scheme">
            <summary>
            Scheme
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.Data.ZookID.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Data.ZookID.Write(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            序列化
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Data.ZookID.Read(Sodao.Zookeeper.Utils.IFormatter)">
            <summary>
            反序列化
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Sodao.Zookeeper.ChildrenWatcher">
            <summary>
            zk node children watcher
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.ChildrenWatcher.Finalize">
            <summary>
            free
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.ChildrenWatcher.#ctor(Sodao.Zookeeper.IZookClient,System.String,System.Action{System.String[]})">
            <summary>
            new
            </summary>
            <param name="zk"></param>
            <param name="path"></param>
            <param name="callback"></param>
            <exception cref="T:System.ArgumentNullException">zk is null.</exception>
            <exception cref="T:System.ArgumentNullException">callback is null.</exception>
        </member>
        <member name="M:Sodao.Zookeeper.ChildrenWatcher.KeeperStateChanged(Sodao.Zookeeper.Data.KeeperState)">
            <summary>
            KeeperStateChanged
            </summary>
            <param name="currentState"></param>
        </member>
        <member name="M:Sodao.Zookeeper.ChildrenWatcher.ListChildren">
            <summary>
            list children
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.ChildrenWatcher.Dispose">
            <summary>
            dispose
            </summary>
        </member>
        <member name="T:Sodao.Zookeeper.NodeCreator">
            <summary>
            node creator
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.NodeCreator.TryCreate(Sodao.Zookeeper.IZookClient,Sodao.Zookeeper.NodeInfo)">
            <summary>
            try create node
            </summary>
            <param name="zk"></param>
            <param name="node"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">zk is null.</exception>
            <exception cref="T:System.ArgumentNullException">node is null.</exception>
        </member>
        <member name="M:Sodao.Zookeeper.NodeCreator.TryCreate(Sodao.Zookeeper.IZookClient,Sodao.Zookeeper.NodeInfo[])">
            <summary>
            try create nodes
            </summary>
            <param name="zk"></param>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.NodeCreator.TryCreate(Sodao.Zookeeper.IZookClient,Sodao.Zookeeper.NodeInfo[],System.Int32,System.Threading.Tasks.TaskCompletionSource{System.Boolean})">
            <summary>
            try create nodes
            </summary>
            <param name="zk"></param>
            <param name="nodes"></param>
            <param name="index"></param>
            <param name="source"></param>
        </member>
        <member name="T:Sodao.Zookeeper.NodeInfo">
            <summary>
            node info
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.NodeInfo.Path">
            <summary>
            get node path
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.NodeInfo.Data">
            <summary>
            get node data
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.NodeInfo.ACL">
            <summary>
            get node acl
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.NodeInfo.CreateMode">
            <summary>
            get node create mode
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.NodeInfo.#ctor(System.String,System.Byte[],Sodao.Zookeeper.Data.ACL[],Sodao.Zookeeper.Data.CreateMode)">
            <summary>
            new
            </summary>
            <param name="path"></param>
            <param name="data"></param>
            <param name="acl"></param>
            <param name="createMode"></param>
        </member>
        <member name="T:Sodao.Zookeeper.SessionNode">
            <summary>
            session node
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.SessionNode.Finalize">
            <summary>
            free
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.SessionNode.#ctor(Sodao.Zookeeper.IZookClient,System.String,System.Byte[],Sodao.Zookeeper.Data.ACL[])">
            <summary>
            new
            </summary>
            <param name="zk"></param>
            <param name="path"></param>
            <param name="data"></param>
            <param name="acl"></param>
            <exception cref="T:System.ArgumentNullException">zk is null.</exception>
        </member>
        <member name="M:Sodao.Zookeeper.SessionNode.CreateNode">
            <summary>
            create node
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.SessionNode.RemoveNode(System.Int32)">
            <summary>
            remove node
            </summary>
            <param name="retry"></param>
        </member>
        <member name="M:Sodao.Zookeeper.SessionNode.KeeperStateChanged(Sodao.Zookeeper.Data.KeeperState)">
            <summary>
            KeeperStateChanged
            </summary>
            <param name="currentState"></param>
        </member>
        <member name="M:Sodao.Zookeeper.SessionNode.Dispose">
            <summary>
            dispose
            </summary>
        </member>
        <member name="T:Sodao.Zookeeper.KeeperStateChangedHandler">
            <summary>
            keeper state changed delegate
            </summary>
            <param name="currentState"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Utils.BinaryFormatter">
            <summary>
            Binary Formatter
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            new
            </summary>
            <param name="inputStream"></param>
            <param name="outputStream"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.ReadByte">
            <summary>
            read byte
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.ReadBuffer">
            <summary>
            read buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.ReadBool">
            <summary>
            read bool
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.ReadInt16">
            <summary>
            read int16
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.ReadInt32">
            <summary>
            read int32
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.ReadInt64">
            <summary>
            read int64
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.ReadString">
            <summary>
            read string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.ReadStringArray">
            <summary>
            read string array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.ReadRecord``1">
            <summary>
            write record
            </summary>
            <typeparam name="TRecord"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.ReadRecordList``1">
            <summary>
            read recore list
            </summary>
            <typeparam name="TRecord"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.Write(System.Byte)">
            <summary>
            write byte
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.Write(System.Byte[])">
            <summary>
            write byte array
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.Write(System.Boolean)">
            <summary>
            write bool
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.Write(System.Int16)">
            <summary>
            write short
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.Write(System.Int32)">
            <summary>
            write int
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.Write(System.Int64)">
            <summary>
            write long
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.Write(System.String)">
            <summary>
            write string
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.Write(System.String[])">
            <summary>
            write string array
            </summary>
            <param name="strs"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.Write(Sodao.Zookeeper.Data.IRecord)">
            <summary>
            write record
            </summary>
            <param name="record"></param>
            <exception cref="T:System.ArgumentNullException">record is null</exception>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.Write(System.Collections.Generic.IEnumerable{Sodao.Zookeeper.Data.IRecord})">
            <summary>
            write record list
            </summary>
            <param name="records"></param>
            <exception cref="T:System.ArgumentNullException">records.Item is null</exception>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.Dispose">
            <summary>
            dispose
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.StartWrite(System.IO.Stream)">
            <summary>
            start write
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryFormatter.StartRead(System.IO.Stream)">
            <summary>
            start read
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:Sodao.Zookeeper.Utils.BinaryReader">
            <summary>
            binary reader
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryReader.#ctor(System.IO.Stream)">
            <summary>
            new
            </summary>
            <param name="stream"></param>
            <exception cref="T:System.ArgumentNullException">stream is null</exception>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryReader.ReadByte">
            <summary>
            read byte
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryReader.ReadBuffer(System.Int32)">
            <summary>
            read buffer
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryReader.ReadBool">
            <summary>
            read bool
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryReader.ReadInt16">
            <summary>
            read int16
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryReader.ReadInt32">
            <summary>
            read int32
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryReader.ReadInt64">
            <summary>
            read int64
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sodao.Zookeeper.Utils.BinaryReader.BaseStream">
            <summary>
            获取 <see cref="T:Sodao.Zookeeper.Utils.BinaryReader"/> 的基础流。
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryReader.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:Sodao.Zookeeper.Utils.BinaryWriter">
            <summary>
            binary writer
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryWriter.#ctor(System.IO.Stream)">
            <summary>
            new
            </summary>
            <param name="stream"></param>
            <exception cref="T:System.ArgumentNullException">stream is null</exception>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryWriter.Write(System.Byte)">
            <summary>
            write byte
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryWriter.Write(System.Byte[])">
            <summary>
            write byte array
            </summary>
            <param name="value"></param>
            <exception cref="T:System.ArgumentNullException">value is null</exception>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryWriter.Write(System.Boolean)">
            <summary>
            write bool
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryWriter.Write(System.Int16)">
            <summary>
            write short
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryWriter.Write(System.Int32)">
            <summary>
            write int
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryWriter.Write(System.Int64)">
            <summary>
            write long
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Sodao.Zookeeper.Utils.BinaryWriter.BaseStream">
            <summary>
            获取 <see cref="T:Sodao.Zookeeper.Utils.BinaryWriter"/> 的基础流。
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.BinaryWriter.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:Sodao.Zookeeper.Utils.IFormatter">
            <summary>
            formatter
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.ReadByte">
            <summary>
            read byte
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.ReadBuffer">
            <summary>
            read buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.ReadBool">
            <summary>
            read bool
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.ReadInt16">
            <summary>
            read int16
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.ReadInt32">
            <summary>
            read int32
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.ReadInt64">
            <summary>
            read int64
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.ReadString">
            <summary>
            read string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.ReadStringArray">
            <summary>
            read string array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.ReadRecord``1">
            <summary>
            read <see cref="T:Sodao.Zookeeper.Data.IRecord"/>
            </summary>
            <typeparam name="TRecord"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.ReadRecordList``1">
            <summary>
            read <see cref="T:Sodao.Zookeeper.Data.IRecord"/> list
            </summary>
            <typeparam name="TRecord"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.Write(System.Byte)">
            <summary>
            write byte
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.Write(System.Byte[])">
            <summary>
            write byte array
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.Write(System.Boolean)">
            <summary>
            write bool
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.Write(System.Int16)">
            <summary>
            write short
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.Write(System.Int32)">
            <summary>
            write int
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.Write(System.Int64)">
            <summary>
            write long
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.Write(System.String)">
            <summary>
            write string
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.Write(System.String[])">
            <summary>
            write string array
            </summary>
            <param name="strs"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.Write(Sodao.Zookeeper.Data.IRecord)">
            <summary>
            write record
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.IFormatter.Write(System.Collections.Generic.IEnumerable{Sodao.Zookeeper.Data.IRecord})">
            <summary>
            write record list
            </summary>
            <param name="records"></param>
        </member>
        <member name="T:Sodao.Zookeeper.Utils.Marshaller">
            <summary>
            Marshaller
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.Marshaller.Serialize(Sodao.Zookeeper.Data.IRecord,System.Boolean)">
            <summary>
            Serialize
            </summary>
            <param name="record"></param>
            <param name="writeLength"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.Marshaller.Serialize(System.Int32,Sodao.Zookeeper.Data.OpCode,Sodao.Zookeeper.Data.IRecord,System.Boolean)">
            <summary>
            Serialize
            </summary>
            <param name="xid"></param>
            <param name="code"></param>
            <param name="record"></param>
            <param name="writeLength"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.Marshaller.Deserialize``1(System.Byte[])">
            <summary>
            Deserialize
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:Sodao.Zookeeper.Utils.PathUtils">
            <summary>
            path utils
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.PathUtils.ValidatePath(System.String,System.Boolean)">
            <summary>
            validate the provided znode path string
            </summary>
            <param name="path">znode path string</param>
            <param name="isSequential">if the path is being created</param>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.PathUtils.ValidatePath(System.String)">
            <summary>
            Validate the provided znode path string
            </summary>
            <param name="path">znode path string</param>
            <exception cref="T:System.ArgumentException">the path is invalid</exception>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.PathUtils.PrependChroot(System.String,System.String)">
            <summary>
            Prepend the chroot to the client path (if present). The expectation of
            this function is that the client path has been validated before this
            function is called
            </summary>
            <param name="chroot"></param>
            <param name="clientPath">The path to the node.</param>
            <returns>server view of the path (chroot prepended to client path)</returns>
        </member>
        <member name="M:Sodao.Zookeeper.Utils.PathUtils.RemoveChroot(System.String,System.String)">
            <summary>
            remove chroot
            </summary>
            <param name="chroot"></param>
            <param name="serverPath"></param>
            <returns></returns>
        </member>
        <member name="T:Sodao.Zookeeper.IWatcher">
            <summary>
            a zookeeper watcher interface
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.IWatcher.Invoke(Sodao.Zookeeper.Data.WatchedEvent)">
            <summary>
            invoke event.
            </summary>
            <param name="zevent"></param>
        </member>
        <member name="T:Sodao.Zookeeper.IZookClient">
            <summary>
            zookeeper client interface
            </summary>
        </member>
        <member name="E:Sodao.Zookeeper.IZookClient.KeeperStateChanged">
            <summary>
            keeper state changed event
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.IZookClient.CurrentKeeperState">
            <summary>
            get current keeperState
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.AddAuthInfo(System.String,System.Byte[])">
            <summary>
            Add the specified scheme:auth information to this connection.
            </summary>
            <param name="scheme">The scheme.</param>
            <param name="auth">The auth.</param>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.Register(Sodao.Zookeeper.IWatcher)">
            <summary>
            Specify the default watcher for the connection (overrides the one
            specified during construction).
            </summary>
            <param name="watcher">The watcher.</param>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.Create(System.String,System.Byte[],Sodao.Zookeeper.Data.ACL[],Sodao.Zookeeper.Data.CreateMode)">
            <summary>
            Create a node with the given path. The node data will be the given data,
            and node acl will be the given acl.
            </summary>
            <param name="path">The path for the node.</param>
            <param name="data">The data for the node.</param>
            <param name="acl">The acl for the node.</param>
            <param name="createMode">specifying whether the node to be created is ephemeral and/or sequential.</param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.Delete(System.String,System.Int32)">
             <summary>
             Delete the node with the given path. The call will succeed if such a node
             exists, and the given version matches the node's version (if the given
             version is -1, it matches any node's versions).
            
             A KeeperException with error code KeeperException.NoNode will be thrown
             if the nodes does not exist.
            
             A KeeperException with error code KeeperException.BadVersion will be
             thrown if the given version does not match the node's version.
            
             A KeeperException with error code KeeperException.NotEmpty will be thrown
             if the node has children.
             
             This operation, if successful, will trigger all the watches on the node
             of the given path left by exists API calls, and the watches on the parent
             node left by getChildren API calls.
             </summary>
             <param name="path">The path.</param>
             <param name="version">The version.</param>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.Exists(System.String,System.Boolean)">
            <summary>
            Return the stat of the node of the given path. Return null if no such a
            node exists.
            
            If the watch is true and the call is successful (no exception is thrown),
            a watch will be left on the node with the given path. The watch will be
            triggered by a successful operation that creates/delete the node or sets
            the data on the node.
            </summary>
            <param name="path">The path.</param>
            <param name="watch">whether need to watch this node</param>
            <returns>the stat of the node of the given path; return null if no such a node exists.</returns>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.Exists(System.String,Sodao.Zookeeper.IWatcher)">
            <summary>
            Return the stat of the node of the given path. Return null if no such a
            node exists.
            
            If the watch is non-null and the call is successful (no exception is thrown),
            a watch will be left on the node with the given path. The watch will be
            triggered by a successful operation that creates/delete the node or sets
            the data on the node.
            </summary>
            <param name="path">The path.</param>
            <param name="watcher">The watcher.</param>
            <returns>the stat of the node of the given path; return null if no such a node exists.</returns>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.GetData(System.String,System.Boolean)">
            <summary>
            Return the data and the stat of the node of the given path.
            </summary>
            <param name="path">the given path</param>
            <param name="watch">whether need to watch this node</param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.GetData(System.String,Sodao.Zookeeper.IWatcher)">
            <summary>
            Return the data and the stat of the node of the given path.
            </summary>
            <param name="path">the given path</param>
            <param name="watcher">explicit watcher</param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.SetData(System.String,System.Byte[],System.Int32)">
             <summary>
             Set the data for the node of the given path if such a node exists and the
             given version matches the version of the node (if the given version is
             -1, it matches any node's versions). Return the stat of the node.
             
             This operation, if successful, will trigger all the watches on the node
             of the given path left by getData calls.
             
             A KeeperException with error code KeeperException.NoNode will be thrown
             if no node with the given path exists.
             
             A KeeperException with error code KeeperException.BadVersion will be
             thrown if the given version does not match the node's version.
            
             The maximum allowable size of the data array is 1 MB (1,048,576 bytes).
             Arrays larger than this will cause a KeeperExecption to be thrown.
             </summary>
             <param name="path">the path of the node</param>
             <param name="data">the data to set</param>
             <param name="version">the expected matching version</param>
             <returns>the state of the node</returns>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.GetACL(System.String)">
            <summary>
            Return the ACL and stat of the node of the given path.
            A KeeperException with error code KeeperException.NoNode will be thrown
            if no node with the given path exists.
            </summary>
            <param name="path">the given path for the node</param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.SetACL(System.String,Sodao.Zookeeper.Data.ACL[],System.Int32)">
            <summary>
            Set the ACL for the node of the given path if such a node exists and the
            given version matches the version of the node. Return the stat of the
            node.
            
            A KeeperException with error code KeeperException.NoNode will be thrown
            if no node with the given path exists.
            
            A KeeperException with error code KeeperException.BadVersion will be
            thrown if the given version does not match the node's version.
            </summary>
            <param name="path"></param>
            <param name="acl"></param>
            <param name="version"></param>
            <returns>the stat of the node.</returns>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.GetChildren(System.String,System.Boolean)">
            <summary>
            Return the list of the children of the node of the given path.
            
            If the watch is non-null and the call is successful (no exception is thrown),
            a watch will be left on the node with the given path. The watch willbe
            triggered by a successful operation that deletes the node of the given
            path or creates/delete a child under the node.
            
            The list of children returned is not sorted and no guarantee is provided
            as to its natural or lexical order.
            
            A KeeperException with error code KeeperException.NoNode will be thrown
            if no node with the given path exists.
            </summary>
            <param name="path"></param>
            <param name="watch"></param>
            <returns>an unordered array of children of the node with the given path</returns>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.GetChildren(System.String,Sodao.Zookeeper.IWatcher)">
            <summary>
            Return the list of the children of the node of the given path.
            
            If the watch is non-null and the call is successful (no exception is thrown),
            a watch will be left on the node with the given path. The watch willbe
            triggered by a successful operation that deletes the node of the given
            path or creates/delete a child under the node.
            
            The list of children returned is not sorted and no guarantee is provided
            as to its natural or lexical order.
            
            A KeeperException with error code KeeperException.NoNode will be thrown
            if no node with the given path exists.
            </summary>
            <param name="path"></param>
            <param name="watcher"></param>
            <returns>an unordered array of children of the node with the given path</returns>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.GetChildren2(System.String,System.Boolean)">
            <summary>
            For the given znode path return the stat and children list.
            
            If the watch is true and the call is successful (no exception is thrown),
            a watch will be left on the node with the given path. The watch willbe
            triggered by a successful operation that deletes the node of the given
            path or creates/delete a child under the node.
            
            The list of children returned is not sorted and no guarantee is provided
            as to its natural or lexical order.
            
            A KeeperException with error code KeeperException.NoNode will be thrown
            if no node with the given path exists.
            </summary>
            <param name="path"></param>
            <param name="watch"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.GetChildren2(System.String,Sodao.Zookeeper.IWatcher)">
            <summary>
            For the given znode path return the stat and children list.
            
            If the watch is true and the call is successful (no exception is thrown),
            a watch will be left on the node with the given path. The watch willbe
            triggered by a successful operation that deletes the node of the given
            path or creates/delete a child under the node.
            
            The list of children returned is not sorted and no guarantee is provided
            as to its natural or lexical order.
            
            A KeeperException with error code KeeperException.NoNode will be thrown
            if no node with the given path exists.
            </summary>
            <param name="path"></param>
            <param name="watcher"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.Start">
            <summary>
            start
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.IZookClient.Stop">
            <summary>
            stop
            </summary>
        </member>
        <member name="T:Sodao.Zookeeper.KeeperException">
            <summary>
            zookeeper exception
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.KeeperException.Path">
            <summary>
            path
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.KeeperException.Error">
            <summary>
            error code
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.KeeperException.#ctor(Sodao.Zookeeper.Data.ZoookError)">
            <summary>
            new
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Sodao.Zookeeper.KeeperException.#ctor(System.String,Sodao.Zookeeper.Data.ZoookError)">
            <summary>
            new
            </summary>
            <param name="path"></param>
            <param name="error"></param>
        </member>
        <member name="T:Sodao.Zookeeper.WatcherAction">
            <summary>
            watcher action
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.WatcherAction.#ctor(System.Action{Sodao.Zookeeper.Data.WatchedEvent})">
            <summary>
            new
            </summary>
            <param name="callback"></param>
            <exception cref="T:System.ArgumentNullException">callback is null.</exception>
        </member>
        <member name="M:Sodao.Zookeeper.WatcherAction.Invoke(Sodao.Zookeeper.Data.WatchedEvent)">
            <summary>
            invoke event.
            </summary>
            <param name="zevent"></param>
        </member>
        <member name="T:Sodao.Zookeeper.ZookClientFactory">
            <summary>
            zookeeper client factory
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClientFactory.Create(System.String,System.String,System.TimeSpan)">
            <summary>
            create new zook client
            </summary>
            <param name="chrootPath"></param>
            <param name="connectionString"></param>
            <param name="sessionTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClientFactory.Create(Sodao.Zookeeper.Config.ZKClientConfig)">
            <summary>
            create new zook client
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClientFactory.Create(System.String,System.String,System.String)">
            <summary>
            create new zook client
            </summary>
            <param name="configPath"></param>
            <param name="sectionName"></param>
            <param name="clientName"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">sectionName is null or empty</exception>
            <exception cref="T:System.ArgumentNullException">clientName is null or empty</exception>
            <exception cref="T:System.InvalidOperationException">clientName不存在</exception>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClientFactory.Create(System.String)">
            <summary>
            create new zook client
            </summary>
            <param name="clientName"></param>
            <returns></returns>
        </member>
        <member name="T:Sodao.Zookeeper.ZookClient">
            <summary>
            zookeeper client
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.#ctor(System.String,System.String,System.TimeSpan,Sodao.Zookeeper.IWatcher)">
            <summary>
            new
            </summary>
            <param name="chrootPath"></param>
            <param name="connectionString">127.0.0.1:2181,10.0.51.14:2181</param>
            <param name="sessionTimeout"></param>
            <param name="defaultWatcher"></param>
            <exception cref="T:System.ArgumentNullException">connectionString is null or empty.</exception>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.IsActive">
            <summary>
            true is active
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.OnEndPointAlready(System.String,Sodao.FastSocket.SocketBase.IConnection)">
            <summary>
            on endPoint already
            </summary>
            <param name="name"></param>
            <param name="connection"></param>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.OnDisconnected(Sodao.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            OnDisconnected
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.OnReceivedUnknowMessage(Sodao.FastSocket.SocketBase.IConnection,Sodao.Zookeeper.ZookResponse)">
            <summary>
            处理未知response
            </summary>
            <param name="connection"></param>
            <param name="message"></param>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.Start">
            <summary>
            start
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.Stop">
            <summary>
            stop
            </summary>
        </member>
        <member name="E:Sodao.Zookeeper.ZookClient.KeeperStateChanged">
            <summary>
            keeper state changed event
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.ZookClient.CurrentKeeperState">
            <summary>
            get current keeperState
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.AddAuthInfo(System.String,System.Byte[])">
            <summary>
            Add the specified scheme:auth information to this connection.
            </summary>
            <param name="scheme"></param>
            <param name="auth"></param>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.Register(Sodao.Zookeeper.IWatcher)">
            <summary>
            Specify the default watcher for the connection (overrides the one
            specified during construction).
            </summary>
            <param name="watcher"></param>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.Create(System.String,System.Byte[],Sodao.Zookeeper.Data.ACL[],Sodao.Zookeeper.Data.CreateMode)">
            <summary>
            Create a node with the given path. The node data will be the given data,
            and node acl will be the given acl.
            </summary>
            <param name="path">The path for the node.</param>
            <param name="data">The data for the node.</param>
            <param name="acl">The acl for the node.</param>
            <param name="createMode">specifying whether the node to be created is ephemeral and/or sequential.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">createMode is null</exception>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.Delete(System.String,System.Int32)">
             <summary>
             Delete the node with the given path. The call will succeed if such a node
             exists, and the given version matches the node's version (if the given
             version is -1, it matches any node's versions).
            
             A KeeperException with error code KeeperException.NoNode will be thrown
             if the nodes does not exist.
            
             A KeeperException with error code KeeperException.BadVersion will be
             thrown if the given version does not match the node's version.
            
             A KeeperException with error code KeeperException.NotEmpty will be thrown
             if the node has children.
             
             This operation, if successful, will trigger all the watches on the node
             of the given path left by exists API calls, and the watches on the parent
             node left by getChildren API calls.
             </summary>
             <param name="path">The path.</param>
             <param name="version">The version.</param>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.Exists(System.String,System.Boolean)">
             <summary>
             Return the stat of the node of the given path. Return null if no such a
             node exists.
             
             If the watch is true and the call is successful (no exception is thrown),
             a watch will be left on the node with the given path. The watch will be
             triggered by a successful operation that creates/delete the node or sets
             the data on the node.
             </summary>
             <param name="path">The path.</param>
             <param name="watch">whether need to watch this node</param>
             <returns>the stat of the node of the given path; return null if no such a node exists.</returns>
            <exception cref="T:System.ArgumentNullException">DefaultWatcher is null</exception>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.Exists(System.String,Sodao.Zookeeper.IWatcher)">
            <summary>
            Return the stat of the node of the given path. Return null if no such a
            node exists.
            
            If the watch is non-null and the call is successful (no exception is thrown),
            a watch will be left on the node with the given path. The watch will be
            triggered by a successful operation that creates/delete the node or sets
            the data on the node.
            </summary>
            <param name="path">The path.</param>
            <param name="watcher">The watcher.</param>
            <returns>the stat of the node of the given path; return null if no such a node exists.</returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.GetData(System.String,System.Boolean)">
            <summary>
            Return the data and the stat of the node of the given path.
            </summary>
            <param name="path">the given path</param>
            <param name="watch">whether need to watch this node</param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.GetData(System.String,Sodao.Zookeeper.IWatcher)">
            <summary>
            Return the data and the stat of the node of the given path.
            </summary>
            <param name="path">the given path</param>
            <param name="watcher">explicit watcher</param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.SetData(System.String,System.Byte[],System.Int32)">
             <summary>
             Set the data for the node of the given path if such a node exists and the
             given version matches the version of the node (if the given version is
             -1, it matches any node's versions). Return the stat of the node.
             
             This operation, if successful, will trigger all the watches on the node
             of the given path left by getData calls.
             
             A KeeperException with error code KeeperException.NoNode will be thrown
             if no node with the given path exists.
             
             A KeeperException with error code KeeperException.BadVersion will be
             thrown if the given version does not match the node's version.
            
             The maximum allowable size of the data array is 1 MB (1,048,576 bytes).
             Arrays larger than this will cause a KeeperExecption to be thrown.
             </summary>
             <param name="path">the path of the node</param>
             <param name="data">the data to set</param>
             <param name="version">the expected matching version</param>
             <returns>the state of the node</returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.GetACL(System.String)">
            <summary>
            Return the ACL and stat of the node of the given path.
            A KeeperException with error code KeeperException.NoNode will be thrown
            if no node with the given path exists.
            </summary>
            <param name="path">the given path for the node</param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.SetACL(System.String,Sodao.Zookeeper.Data.ACL[],System.Int32)">
            <summary>
            Set the ACL for the node of the given path if such a node exists and the
            given version matches the version of the node. Return the stat of the
            node.
            
            A KeeperException with error code KeeperException.NoNode will be thrown
            if no node with the given path exists.
            
            A KeeperException with error code KeeperException.BadVersion will be
            thrown if the given version does not match the node's version.
            </summary>
            <param name="path"></param>
            <param name="acl"></param>
            <param name="version"></param>
            <returns>the stat of the node.</returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.GetChildren(System.String,System.Boolean)">
            <summary>
            Return the list of the children of the node of the given path.
            
            If the watch is non-null and the call is successful (no exception is thrown),
            a watch will be left on the node with the given path. The watch willbe
            triggered by a successful operation that deletes the node of the given
            path or creates/delete a child under the node.
            
            The list of children returned is not sorted and no guarantee is provided
            as to its natural or lexical order.
            
            A KeeperException with error code KeeperException.NoNode will be thrown
            if no node with the given path exists.
            </summary>
            <param name="path"></param>
            <param name="watch"></param>
            <returns>an unordered array of children of the node with the given path</returns>
            <exception cref="T:System.ArgumentNullException">DefaultWatcher is null</exception>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.GetChildren(System.String,Sodao.Zookeeper.IWatcher)">
            <summary>
            Return the list of the children of the node of the given path.
            
            If the watch is non-null and the call is successful (no exception is thrown),
            a watch will be left on the node with the given path. The watch willbe
            triggered by a successful operation that deletes the node of the given
            path or creates/delete a child under the node.
            
            The list of children returned is not sorted and no guarantee is provided
            as to its natural or lexical order.
            
            A KeeperException with error code KeeperException.NoNode will be thrown
            if no node with the given path exists.
            </summary>
            <param name="path"></param>
            <param name="watcher"></param>
            <returns>an unordered array of children of the node with the given path</returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.GetChildren2(System.String,System.Boolean)">
            <summary>
            For the given znode path return the stat and children list.
            
            If the watch is true and the call is successful (no exception is thrown),
            a watch will be left on the node with the given path. The watch willbe
            triggered by a successful operation that deletes the node of the given
            path or creates/delete a child under the node.
            
            The list of children returned is not sorted and no guarantee is provided
            as to its natural or lexical order.
            
            A KeeperException with error code KeeperException.NoNode will be thrown
            if no node with the given path exists.
            </summary>
            <param name="path"></param>
            <param name="watch"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">DefaultWatcher is null</exception>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.GetChildren2(System.String,Sodao.Zookeeper.IWatcher)">
            <summary>
            For the given znode path return the stat and children list.
            
            If the watch is true and the call is successful (no exception is thrown),
            a watch will be left on the node with the given path. The watch willbe
            triggered by a successful operation that deletes the node of the given
            path or creates/delete a child under the node.
            
            The list of children returned is not sorted and no guarantee is provided
            as to its natural or lexical order.
            
            A KeeperException with error code KeeperException.NoNode will be thrown
            if no node with the given path exists.
            </summary>
            <param name="path"></param>
            <param name="watcher"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.ConnectToZookeeper(Sodao.FastSocket.SocketBase.IConnection)">
            <summary>
            connecto to zookeeper
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.ResetWatches(Sodao.FastSocket.SocketBase.IConnection)">
            <summary>
            reset watches
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.ResetAuthInfo(Sodao.FastSocket.SocketBase.IConnection)">
            <summary>
            reset auth info
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.ExecuteAsync``1(System.Int32,Sodao.Zookeeper.Data.OpCode,Sodao.Zookeeper.Data.IRecord,System.Action{System.Threading.Tasks.TaskCompletionSource{``0},Sodao.Zookeeper.ZookResponse},System.Object)">
            <summary>
            execute async
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xid"></param>
            <param name="code"></param>
            <param name="record"></param>
            <param name="callback"></param>
            <param name="asyncState"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">callback is null.</exception>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.StartPing">
            <summary>
            start ping
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.CloseSession">
            <summary>
            close session
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClient.SetKeeperState(Sodao.Zookeeper.Data.KeeperState)">
            <summary>
            set keeper state
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Sodao.Zookeeper.ZookClientPool">
            <summary>
            zook client pool
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.ZookClientPool._dicClients">
            <summary>
            key:configPath+sectionName+clientName
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClientPool.Get(System.String)">
            <summary>
            get zook client
            </summary>
            <param name="clientName"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookClientPool.Get(System.String,System.String,System.String)">
            <summary>
            get zook client
            </summary>
            <param name="configPath"></param>
            <param name="sectionName"></param>
            <param name="clientName"></param>
            <returns></returns>
        </member>
        <member name="T:Sodao.Zookeeper.ZookProtocol">
            <summary>
            zookeeper protocol
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.ZookProtocol.DefaultSyncSeqID">
            <summary>
            defautl seqId
            </summary>
        </member>
        <member name="P:Sodao.Zookeeper.ZookProtocol.IsAsync">
            <summary>
            true
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.ZookProtocol.Parse(Sodao.FastSocket.SocketBase.IConnection,System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
            Parse
            </summary>
            <param name="connection"></param>
            <param name="buffer"></param>
            <param name="readlength"></param>
            <returns></returns>
            <exception cref="T:Sodao.FastSocket.Client.Protocol.BadProtocolException"></exception>
        </member>
        <member name="T:Sodao.Zookeeper.ZookResponse">
            <summary>
            zookeeper response
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.ZookResponse.XId">
            <summary>
            xid
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.ZookResponse.Payload">
            <summary>
            payload
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.ZookResponse.ZXId">
            <summary>
            zxid，事务ID
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.ZookResponse.ErrorCode">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.ZookResponse.#ctor(System.Int32,System.Byte[])">
            <summary>
            new
            </summary>
            <param name="xid"></param>
            <param name="payload"></param>
        </member>
        <member name="M:Sodao.Zookeeper.ZookResponse.#ctor(System.Int32,System.Int64,Sodao.Zookeeper.Data.ZoookError,System.Byte[])">
            <summary>
            new
            </summary>
            <param name="xid"></param>
            <param name="zxid"></param>
            <param name="errorCode"></param>
            <param name="payload"></param>
        </member>
        <member name="P:Sodao.Zookeeper.ZookResponse.SeqID">
            <summary>
            get seqId
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.ZookResponse.HasError">
            <summary>
            true表示当前response有exception
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookResponse.Error">
            <summary>
            return exception by errorCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookResponse.Error(System.String)">
            <summary>
            return exception by errorCode and path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Sodao.Zookeeper.ZookWatcherManager">
            <summary>
            zookeeper watcher manager
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.ZookWatcherManager._dataWatches">
            <summary>
            key:client path
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.ZookWatcherManager._existWatches">
            <summary>
            key:client path
            </summary>
        </member>
        <member name="F:Sodao.Zookeeper.ZookWatcherManager._childWatches">
            <summary>
            key:client path
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.ZookWatcherManager.#ctor(Sodao.Zookeeper.IWatcher)">
            <summary>
            new
            </summary>
            <param name="defaultWatcher"></param>
        </member>
        <member name="P:Sodao.Zookeeper.ZookWatcherManager.DefaultWatcher">
            <summary>
            get default watcher
            </summary>
        </member>
        <member name="M:Sodao.Zookeeper.ZookWatcherManager.RegisterWatcher(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{Sodao.Zookeeper.IWatcher}},Sodao.Zookeeper.IWatcher,System.String)">
            <summary>
            register watcher
            </summary>
            <param name="container"></param>
            <param name="watcher"></param>
            <param name="clientPath"></param>
            <exception cref="T:System.ArgumentNullException">container is null</exception>
        </member>
        <member name="M:Sodao.Zookeeper.ZookWatcherManager.RegisterDataWatcher(Sodao.Zookeeper.IWatcher,System.String)">
            <summary>
            register data watcher
            </summary>
            <param name="watcher"></param>
            <param name="clientPath"></param>
        </member>
        <member name="M:Sodao.Zookeeper.ZookWatcherManager.RegisterExistWatcher(Sodao.Zookeeper.IWatcher,System.String)">
            <summary>
            register exist watcher
            </summary>
            <param name="watcher"></param>
            <param name="clientPath"></param>
        </member>
        <member name="M:Sodao.Zookeeper.ZookWatcherManager.RegisterChildWatcher(Sodao.Zookeeper.IWatcher,System.String)">
            <summary>
            register child watcher
            </summary>
            <param name="watcher"></param>
            <param name="clientPath"></param>
        </member>
        <member name="M:Sodao.Zookeeper.ZookWatcherManager.TryRemoveWatcher(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{Sodao.Zookeeper.IWatcher}},System.String)">
            <summary>
            try remove and return <see cref="T:Sodao.Zookeeper.IWatcher"/> set by clientPath.
            </summary>
            <param name="container"></param>
            <param name="clientPath"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">container is null</exception>
        </member>
        <member name="M:Sodao.Zookeeper.ZookWatcherManager.TryRemoveDataWatcher(System.String)">
            <summary>
            try remove and return data <see cref="T:Sodao.Zookeeper.IWatcher"/> set by clientPath.
            </summary>
            <param name="clientPath"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookWatcherManager.TryRemoveExistWatcher(System.String)">
            <summary>
            try remove and return exist <see cref="T:Sodao.Zookeeper.IWatcher"/> set by clientPath.
            </summary>
            <param name="clientPath"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookWatcherManager.TryRemoveChildWatcher(System.String)">
            <summary>
            try remove and return child <see cref="T:Sodao.Zookeeper.IWatcher"/> set by clientPath.
            </summary>
            <param name="clientPath"></param>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookWatcherManager.GetDataWatchKeys">
            <summary>
            get data watch keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookWatcherManager.GetExistWatchKeys">
            <summary>
            get exist watch keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookWatcherManager.GetChildWatchKeys">
            <summary>
            get child watch keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sodao.Zookeeper.ZookWatcherManager.Invoke(Sodao.Zookeeper.Data.WatchedEvent)">
            <summary>
            invoke
            </summary>
            <param name="wevent"></param>
            <exception cref="T:System.ArgumentNullException">wevent is null.</exception>
        </member>
        <member name="M:Sodao.Zookeeper.ZookWatcherManager.CopyTo(System.Collections.Generic.HashSet{Sodao.Zookeeper.IWatcher},System.Collections.Generic.HashSet{Sodao.Zookeeper.IWatcher})">
            <summary>
            copy to
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <exception cref="T:System.ArgumentNullException">to is null</exception>
        </member>
    </members>
</doc>
